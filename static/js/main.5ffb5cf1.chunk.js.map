{"version":3,"sources":["components/Recorder/Recorder.js","App.js","serviceWorker.js","index.js"],"names":["Recorder","state","recording","startVid","window","video","document","querySelector","navigator","mediaDevices","getUserMedia","audio","then","stream","srcObject","catch","err","code","alert","console","log","stopVid","getTracks","forEach","track","stop","handleDataAvailable","event","data","size","recordedBlobs","push","startRecording","_this","setState","options","mimeType","bitsPerSecond","mediaRecorder","MediaRecorder","e0","e1","e2","error","ondataavailable","start","stopRecording","srcVid","Blob","type","thumbVid","File","Date","now","lastModified","src","URL","createObjectURL","thumbnail","props","updateList","this","react_default","a","createElement","className","onClick","disabled","Component","App","vidList","currentlyPlaying","media","index","Object","toConsumableArray","splice","localStorage","setItem","JSON","stringify","showVid","_this2","id","autoPlay","controls","components_Recorder_Recorder","map","key","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"qPAsGeA,0NAnGbC,MAAQ,CACNC,WAAW,KAGbC,SAAW,WAMTC,OAAOC,MAAQC,SAASC,cAAc,gBAEtCC,UAAUC,aAAaC,aAPH,CAClBL,OAAO,EACPM,OAAO,IAMNC,KAAK,SAACC,GACLT,OAAOC,MAAMS,UAAYD,EACzBT,OAAOS,OAASA,IAEjBE,MAAM,SAAAC,GACL,OAAOA,EAAIC,MACT,KAAK,EACHC,MAAM,kDACN,MACF,KAAK,EACHA,MAAM,8DACN,MACF,QACEA,MAAM,mCAEVC,QAAQC,IAAIJ,QAGlBK,QAAU,WACJjB,OAAOS,QACTT,OAAOS,OAAOS,YAAYC,QAAQ,SAAAC,GAChCA,EAAMC,YAIZC,oBAAsB,SAACC,GACjBA,EAAMC,MAAQD,EAAMC,KAAKC,KAAO,GAClCzB,OAAO0B,cAAcC,KAAKJ,EAAMC,SAGpCI,eAAe,WACbC,EAAKC,SAAS,CAAEhC,WAAW,IAC3B,IAAIiC,EAAU,CAACC,SAAU,wBAAyBC,cAAe,KACjEjC,OAAO0B,cAAgB,GACvB,IACE1B,OAAOkC,cAAgB,IAAIC,cAAcnC,OAAOS,OAAQsB,GACxD,MAAOK,GACPrB,QAAQC,IAAI,uDAAwDe,EAASK,GAC7E,IACEL,EAAU,CAACC,SAAU,wBAAyBC,cAAe,KAC7DjC,OAAOkC,cAAgB,IAAIC,cAAcnC,OAAOS,OAAQsB,GACxD,MAAOM,GACPtB,QAAQC,IAAI,uDAAwDe,EAASM,GAC7E,IACEN,EAAU,YACV/B,OAAOkC,cAAgB,IAAIC,cAAcnC,OAAOS,OAAQsB,GACxD,MAAOO,GAIP,OAHAT,EAAKC,SAAS,CAAEhC,WAAW,IAC3BgB,MAAM,uCACNC,QAAQwB,MAAM,0CAA2CD,KAK/DtC,OAAOkC,cAAcM,gBAAkBX,EAAKP,oBAC5CtB,OAAOkC,cAAcO,MAAM,OAG7BC,cAAc,WACZb,EAAKC,SAAS,CAAEhC,WAAW,IAC3BE,OAAOkC,cAAcb,OACrB,IAAIsB,EAAS,IAAIC,KAAK5C,OAAO0B,cAAe,CAACmB,KAAM,eAC/CC,EAAW,IAAIF,KACjB,CAAC5C,OAAO0B,cAAc,GAAG1B,OAAO0B,cAAc,IAC9C,CAACmB,KAAM,eAETF,EAAS,IAAII,KAAK,CAACJ,GAASK,KAAKC,MAAO,CAACJ,KAAM,aAAcK,aAAcF,KAAKC,QAChFH,EAAW,IAAIC,KAAK,CAACD,GAAWE,KAAKC,MAAO,CAACJ,KAAM,aAAcK,aAAcF,KAAKC,QACpF,IAAIE,EAAMnD,OAAOoD,IAAIC,gBAAgBV,GACjCW,EAAYtD,OAAOoD,IAAIC,gBAAgBP,GAC3CjB,EAAK0B,MAAMC,WAAW,CAACL,MAAKG,kGAG5BG,KAAK1D,4CAIL,OACE2D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,UAAQE,QAASL,KAAK7B,eAAgBmC,SAAUN,KAAK5D,MAAMC,WAA3D,UACA4D,EAAAC,EAAAC,cAAA,UAAQE,QAASL,KAAKf,cAAeqB,UAAWN,KAAK5D,MAAMC,WAA3D,gBA9FekE,cCwDRC,6MArDbpE,MAAQ,CACNqE,QAAS,GACTC,iBAAkB,MAGpBX,WAAa,SAACY,EAAOC,GACnB,IAAIH,EAAOI,OAAAC,EAAA,EAAAD,CAAOzC,EAAKhC,MAAMqE,SAC1BG,EACDH,EAAQM,OAAOH,EAAM,GAGrBH,EAAQvC,KAAKyC,GAEfvC,EAAKC,SAAS,CAAEoC,YAChBlE,OAAOyE,aAAaC,QAAQ,UAAWC,KAAKC,UAAUV,OAGxDW,QAAU,SAAC1B,GACTtB,EAAKC,SAAS,CACZqC,iBAAkBhB,6EAIb,IAAA2B,EAAArB,KACP,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,gCAGEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,uBACHF,EAAAC,EAAAC,cAAA,SAAOmB,GAAG,SAASC,UAAQ,KAE7BtB,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,2BACHF,EAAAC,EAAAC,cAAA,SAAOmB,GAAG,OAAO5B,IAAKM,KAAK5D,MAAMsE,iBAAkBa,UAAQ,EAACC,UAAQ,MAGxEvB,EAAAC,EAAAC,cAACsB,EAAD,CAAU1B,WAAYC,KAAKD,aAC3BE,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACdJ,KAAK5D,MAAMqE,SAAWT,KAAK5D,MAAMqE,QAAQiB,IAAI,SAACf,EAAOC,GAAR,OAC5CX,EAAAC,EAAAC,cAAA,OAAKwB,IAAKhB,EAAMd,UAAWO,UAAU,aACnCH,EAAAC,EAAAC,cAAA,SAAOT,IAAKiB,EAAMd,UAAWQ,QAAS,kBAAIgB,EAAKD,QAAQT,EAAMjB,QAC7DO,EAAAC,EAAAC,cAAA,UAAQE,QAAS,WAAKgB,EAAKtB,WAAWY,EAAMC,KAA5C,sBA7CML,aCQEqB,QACW,cAA7BrF,OAAOsF,SAASC,UAEe,UAA7BvF,OAAOsF,SAASC,UAEhBvF,OAAOsF,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASzF,SAAS0F,eAAe,SD2H3C,kBAAmBxF,WACrBA,UAAUyF,cAAcC,MAAMtF,KAAK,SAAAuF,GACjCA,EAAaC","file":"static/js/main.5ffb5cf1.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Record.css';\r\nclass Recorder extends Component{\r\n  state = {\r\n    recording: false\r\n  }\r\n\r\n  startVid = ()=> {\r\n    const constraints = {\r\n      video: true,\r\n      audio: true\r\n    };\r\n\r\n    window.video = document.querySelector('video#record');\r\n\r\n    navigator.mediaDevices.getUserMedia(constraints)\r\n      .then((stream) => {\r\n        window.video.srcObject = stream;\r\n        window.stream = stream;\r\n      })\r\n      .catch(err=>{\r\n        switch(err.code) {\r\n          case 0:\r\n            alert(\"We need your camera and microphone permissions\");\r\n            break;\r\n          case 8:\r\n            alert(\"You don't have a camera/microphone attached to your system\");\r\n            break;\r\n          default:\r\n            alert(\"Couldn't get your media devices\");\r\n        }\r\n        console.log(err);\r\n      });\r\n  }\r\n  stopVid = ()=> {\r\n    if (window.stream) {\r\n      window.stream.getTracks().forEach(track=> {\r\n        track.stop();\r\n      });\r\n    }\r\n  }\r\n  handleDataAvailable = (event)=> {\r\n    if (event.data && event.data.size > 0) {\r\n      window.recordedBlobs.push(event.data);\r\n    }\r\n  }\r\n  startRecording=()=> {\r\n    this.setState({ recording: true });\r\n    var options = {mimeType: 'video/webm;codecs=vp9', bitsPerSecond: 100000};\r\n    window.recordedBlobs = [];\r\n    try {\r\n      window.mediaRecorder = new MediaRecorder(window.stream, options);\r\n    } catch (e0) {\r\n      console.log('Unable to create MediaRecorder with options Object: ', options, e0);\r\n      try {\r\n        options = {mimeType: 'video/webm;codecs=vp8', bitsPerSecond: 100000};\r\n        window.mediaRecorder = new MediaRecorder(window.stream, options);\r\n      } catch (e1) {\r\n        console.log('Unable to create MediaRecorder with options Object: ', options, e1);\r\n        try {\r\n          options = 'video/mp4';\r\n          window.mediaRecorder = new MediaRecorder(window.stream, options);\r\n        } catch (e2) {\r\n          this.setState({ recording: false });\r\n          alert('Not supported by this browser.');\r\n          console.error('Exception while creating MediaRecorder:', e2);\r\n          return;\r\n        }\r\n      }\r\n    }\r\n    window.mediaRecorder.ondataavailable = this.handleDataAvailable;\r\n    window.mediaRecorder.start(10); // collect 10ms of data\r\n  }\r\n\r\n  stopRecording=()=> {\r\n    this.setState({ recording: false });\r\n    window.mediaRecorder.stop();\r\n    let srcVid = new Blob(window.recordedBlobs, {type: 'video/webm'});\r\n    let thumbVid = new Blob(\r\n      [window.recordedBlobs[0],window.recordedBlobs[1]],\r\n      {type: 'video/webm'}\r\n      );\r\n    srcVid = new File([srcVid], Date.now(), {type: 'video/webm', lastModified: Date.now()});\r\n    thumbVid = new File([thumbVid], Date.now(), {type: 'video/webm', lastModified: Date.now()});\r\n    let src = window.URL.createObjectURL(srcVid);\r\n    let thumbnail = window.URL.createObjectURL(thumbVid);\r\n    this.props.updateList({src, thumbnail});\r\n  }\r\n  componentDidMount() {\r\n    this.startVid();\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"record-btn-wrap\">\r\n        <button onClick={this.startRecording} disabled={this.state.recording}>Record</button>\r\n        <button onClick={this.stopRecording} disabled={!this.state.recording}>Stop</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Recorder;","import React, { Component } from 'react';\nimport './styles/App.css';\nimport Recorder from './components/Recorder/Recorder'\n\nclass App extends Component {\n  state = {\n    vidList: [],\n    currentlyPlaying: \"\"\n  }\n\n  updateList = (media, index)=> {\n    let vidList = [...this.state.vidList];\n    if(index) {\n      vidList.splice(index,1);\n    }\n    else {\n      vidList.push(media);\n    }\n    this.setState({ vidList });\n    window.localStorage.setItem(\"vidList\", JSON.stringify(vidList));\n  }\n\n  showVid = (src)=> {\n    this.setState({\n      currentlyPlaying: src\n    });\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n      <header>\n      Capture & Play\n      </header>\n        <div className=\"recorder-wrap\">\n          <div><p>Live Video</p>\n            <video id=\"record\" autoPlay></video>\n          </div>\n          <div><p>Recorded Video</p>\n            <video id=\"play\" src={this.state.currentlyPlaying} autoPlay controls></video>\n          </div>\n        </div>\n        <Recorder updateList={this.updateList} />\n        <hr />\n        <p>Recorded Video List</p>\n        <div className=\"list-wrap\">\n        {this.state.vidList && this.state.vidList.map((media, index)=> (\n          <div key={media.thumbnail} className=\"thumbnail\">\n            <video src={media.thumbnail} onClick={()=>this.showVid(media.src)}></video>\n            <button onClick={()=>{this.updateList(media,index)}}>Delete</button>\n          </div>\n        ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}